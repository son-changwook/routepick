# RoutePickr 개발 환경 Docker Compose
# 로컬 개발용 전체 스택 구성

version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: routepick-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: routepick2024!
      MYSQL_DATABASE: routepick
      MYSQL_USER: routepick
      MYSQL_PASSWORD: routepick2024!
      TZ: Asia/Seoul
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/routepick.sql:/docker-entrypoint-initdb.d/routepick.sql
      - ./docker/mysql/my.cnf:/etc/mysql/conf.d/my.cnf
    command: --default-authentication-plugin=mysql_native_password
    networks:
      - routepick-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "routepick", "-proutepick2024!"]
      timeout: 20s
      retries: 10

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: routepick-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass routepick2024!
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - routepick-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "routepick2024!", "ping"]
      timeout: 10s
      retries: 5

  # Backend Spring Boot Application
  backend:
    build:
      context: ./routepick-backend
      dockerfile: Dockerfile
    container_name: routepick-backend
    restart: unless-stopped
    environment:
      SPRING_PROFILES_ACTIVE: local
      DB_HOST: mysql
      DB_PORT: 3306
      DB_NAME: routepick
      DB_USERNAME: routepick
      DB_PASSWORD: routepick2024!
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: routepick2024!
      JWT_SECRET: routepick-jwt-secret-key-for-development-2024
      TZ: Asia/Seoul
    ports:
      - "8080:8080"
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - routepick-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      timeout: 30s
      retries: 5
      start_period: 60s

  # React Native Metro Bundler (개발용)
  metro:
    build:
      context: ./routepick-app
      dockerfile: Dockerfile.dev
    container_name: routepick-metro
    restart: unless-stopped
    environment:
      NODE_ENV: development
      EXPO_DEVTOOLS_LISTEN_ADDRESS: 0.0.0.0
    ports:
      - "8081:8081"  # Metro bundler
      - "19000:19000"  # Expo DevTools
      - "19001:19001"  # Expo DevTools
      - "19002:19002"  # Expo DevTools
    volumes:
      - ./routepick-app:/app
      - /app/node_modules
    command: npm start
    networks:
      - routepick-network

  # React Admin Web Application
  admin-web:
    build:
      context: ./routepick-admin
      dockerfile: Dockerfile.dev
    container_name: routepick-admin-web
    restart: unless-stopped
    environment:
      NODE_ENV: development
      VITE_API_BASE_URL: http://localhost:8080/api/v1
      VITE_WS_URL: ws://localhost:8080/ws
    ports:
      - "3000:3000"
    volumes:
      - ./routepick-admin:/app
      - /app/node_modules
    command: npm run dev
    depends_on:
      - backend
    networks:
      - routepick-network

  # Nginx (API Gateway & Static File Server)
  nginx:
    image: nginx:alpine
    container_name: routepick-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./uploads:/var/www/uploads
      - ./docker/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - admin-web
    networks:
      - routepick-network

  # MinIO (S3 Compatible Storage for Development)
  minio:
    image: minio/minio:latest
    container_name: routepick-minio
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: routepick
      MINIO_ROOT_PASSWORD: routepick2024!
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - routepick-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      timeout: 20s
      retries: 3

  # Elasticsearch (로그 검색용)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: routepick-elasticsearch
    restart: unless-stopped
    environment:
      - node.name=elasticsearch
      - cluster.name=routepick-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - routepick-network

  # Kibana (로그 시각화)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: routepick-kibana
    restart: unless-stopped
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - routepick-network

  # Mailhog (이메일 테스트용)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: routepick-mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - routepick-network

  # Prometheus (모니터링)
  prometheus:
    image: prom/prometheus:latest
    container_name: routepick-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - routepick-network

  # Grafana (대시보드)
  grafana:
    image: grafana/grafana:latest
    container_name: routepick-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: routepick2024!
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - routepick-network

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  elasticsearch_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  routepick-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16