# RoutePickr Frontend CI/CD Pipeline
# React Native App & React Admin Web 빌드, 테스트, 배포

name: Frontend CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'routepick-app/**'
      - 'routepick-admin/**'
      - '.github/workflows/ci-frontend.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'routepick-app/**'
      - 'routepick-admin/**'

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8.10.0'

jobs:
  # React Native App 빌드 및 테스트
  mobile-app:
    runs-on: ubuntu-latest
    
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4

    - name: Node.js 설정
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: pnpm 설정
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: 의존성 캐시
      uses: actions/cache@v3
      with:
        path: ~/.pnpm-store
        key: ${{ runner.os }}-pnpm-${{ hashFiles('routepick-app/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-

    - name: 의존성 설치
      run: |
        cd routepick-app
        pnpm install --frozen-lockfile

    - name: TypeScript 타입 검사
      run: |
        cd routepick-app
        pnpm run type-check

    - name: ESLint 검사
      run: |
        cd routepick-app
        pnpm run lint

    - name: 단위 테스트
      run: |
        cd routepick-app
        pnpm run test:ci

    - name: 테스트 커버리지 업로드
      uses: codecov/codecov-action@v3
      with:
        file: routepick-app/coverage/lcov.info
        flags: mobile-app
        name: mobile-app-coverage

    - name: Metro 번들러 테스트
      run: |
        cd routepick-app
        pnpm run bundle:test

    # Android 빌드 (개발 브랜치에서만)
    - name: Java 설정 (Android)
      if: github.ref == 'refs/heads/develop'
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Android SDK 설정
      if: github.ref == 'refs/heads/develop'
      uses: android-actions/setup-android@v3

    - name: Android 빌드
      if: github.ref == 'refs/heads/develop'
      run: |
        cd routepick-app
        npx react-native build-android --mode=debug

    - name: Android APK 업로드
      if: github.ref == 'refs/heads/develop'
      uses: actions/upload-artifact@v4
      with:
        name: android-apk
        path: routepick-app/android/app/build/outputs/apk/debug/app-debug.apk

  # React Admin Web 빌드 및 테스트
  admin-web:
    runs-on: ubuntu-latest
    
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4

    - name: Node.js 설정
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: pnpm 설정
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: 의존성 캐시
      uses: actions/cache@v3
      with:
        path: ~/.pnpm-store
        key: ${{ runner.os }}-pnpm-${{ hashFiles('routepick-admin/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-

    - name: 의존성 설치
      run: |
        cd routepick-admin
        pnpm install --frozen-lockfile

    - name: TypeScript 타입 검사
      run: |
        cd routepick-admin
        pnpm run type-check

    - name: ESLint 검사
      run: |
        cd routepick-admin
        pnpm run lint

    - name: 단위 테스트
      run: |
        cd routepick-admin
        pnpm run test:ci

    - name: 테스트 커버리지 업로드
      uses: codecov/codecov-action@v3
      with:
        file: routepick-admin/coverage/lcov.info
        flags: admin-web
        name: admin-web-coverage

    - name: 빌드 테스트
      run: |
        cd routepick-admin
        pnpm run build

    - name: 빌드 아티팩트 업로드
      uses: actions/upload-artifact@v4
      with:
        name: admin-web-build
        path: routepick-admin/dist/

  # E2E 테스트
  e2e-test:
    runs-on: ubuntu-latest
    needs: [mobile-app, admin-web]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4

    - name: Node.js 설정
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: pnpm 설정
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Admin Web 의존성 설치
      run: |
        cd routepick-admin
        pnpm install --frozen-lockfile

    - name: Cypress E2E 테스트
      uses: cypress-io/github-action@v6
      with:
        working-directory: routepick-admin
        start: pnpm run dev
        wait-on: 'http://localhost:3000'
        wait-on-timeout: 120
        browser: chrome
        record: true
      env:
        CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: E2E 테스트 결과 업로드
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: cypress-screenshots
        path: routepick-admin/cypress/screenshots/

  # Admin Web Docker 이미지 빌드
  build-admin-image:
    runs-on: ubuntu-latest
    needs: admin-web
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4

    - name: AWS 자격 증명 설정
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2

    - name: ECR 로그인
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Docker 메타데이터 설정
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ steps.login-ecr.outputs.registry }}/routepick-admin
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Docker 이미지 빌드 및 푸시
      uses: docker/build-push-action@v5
      with:
        context: ./routepick-admin
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VITE_API_BASE_URL=${{ secrets.API_BASE_URL }}
          VITE_WS_URL=${{ secrets.WS_URL }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 개발 환경 배포
  deploy-admin-dev:
    runs-on: ubuntu-latest
    needs: build-admin-image
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
    - name: AWS 자격 증명 설정
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2

    - name: ECS 서비스 업데이트
      run: |
        aws ecs update-service \
          --cluster routepick-dev \
          --service routepick-admin-dev \
          --force-new-deployment

    - name: 배포 완료 대기
      run: |
        aws ecs wait services-stable \
          --cluster routepick-dev \
          --services routepick-admin-dev

  # 운영 환경 배포
  deploy-admin-prod:
    runs-on: ubuntu-latest
    needs: build-admin-image
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: AWS 자격 증명 설정
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2

    - name: CloudFront 캐시 무효화
      run: |
        DISTRIBUTION_ID=$(aws cloudfront list-distributions \
          --query "DistributionList.Items[?Aliases.Items[0]=='admin.routepick.com'].Id" \
          --output text)
        
        aws cloudfront create-invalidation \
          --distribution-id $DISTRIBUTION_ID \
          --paths "/*"

    - name: ECS 서비스 업데이트 (Blue/Green)
      run: |
        aws deploy create-deployment \
          --application-name routepick-admin-prod \
          --deployment-config-name CodeDeployDefault.ECSBlueGreenCanary10Percent \
          --deployment-group-name routepick-admin-prod-dg

  # React Native 앱 배포 (Android)
  deploy-mobile-android:
    runs-on: ubuntu-latest
    needs: mobile-app
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4

    - name: Node.js 설정
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Java 설정
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Android SDK 설정
      uses: android-actions/setup-android@v3

    - name: 의존성 설치
      run: |
        cd routepick-app
        npm install

    - name: Android 릴리스 빌드
      run: |
        cd routepick-app
        npx react-native build-android --mode=release
      env:
        MYAPP_UPLOAD_STORE_FILE: ${{ secrets.ANDROID_KEYSTORE_FILE }}
        MYAPP_UPLOAD_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
        MYAPP_UPLOAD_STORE_PASSWORD: ${{ secrets.ANDROID_STORE_PASSWORD }}
        MYAPP_UPLOAD_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}

    - name: Google Play Store 업로드
      uses: r0adkll/upload-google-play@v1
      with:
        serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}
        packageName: com.routepick.app
        releaseFiles: routepick-app/android/app/build/outputs/bundle/release/app-release.aab
        track: internal
        status: completed

  # 성능 모니터링
  lighthouse-audit:
    runs-on: ubuntu-latest
    needs: deploy-admin-dev
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        urls: |
          https://admin-dev.routepick.com
        uploadArtifacts: true
        temporaryPublicStorage: true

  # 보안 스캔
  security-audit:
    runs-on: ubuntu-latest
    
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4

    - name: Node.js 설정
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: npm audit (Mobile App)
      run: |
        cd routepick-app
        npm audit --audit-level moderate

    - name: npm audit (Admin Web)
      run: |
        cd routepick-admin
        npm audit --audit-level moderate

    - name: Snyk 보안 스캔
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --all-projects --severity-threshold=high

  # 알림
  notify:
    runs-on: ubuntu-latest
    needs: [mobile-app, admin-web, deploy-admin-dev, deploy-admin-prod]
    if: always()
    
    steps:
    - name: Slack 알림
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#frontend-deployment'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        fields: repo,message,commit,author,action,eventName,ref,workflow