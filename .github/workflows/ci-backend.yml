# RoutePickr Backend CI/CD Pipeline
# Spring Boot 애플리케이션 빌드, 테스트, 배포

name: Backend CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'routepick-backend/**'
      - 'routepick-common/**'
      - '.github/workflows/ci-backend.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'routepick-backend/**'
      - 'routepick-common/**'

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: routepick-backend
  JAVA_VERSION: '17'
  GRADLE_VERSION: '8.5'

jobs:
  # 코드 품질 검사
  code-quality:
    runs-on: ubuntu-latest
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4

    - name: Java 설정
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Gradle 캐시 설정
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: 공통 라이브러리 빌드
      run: |
        cd routepick-common
        ./gradlew clean build publishToMavenLocal

    - name: 코드 스타일 검사 (Checkstyle)
      run: |
        cd routepick-backend
        ./gradlew checkstyleMain checkstyleTest

    - name: 정적 분석 (SpotBugs)
      run: |
        cd routepick-backend
        ./gradlew spotbugsMain spotbugsTest

    - name: 의존성 취약점 검사
      run: |
        cd routepick-backend
        ./gradlew dependencyCheckAnalyze

    - name: 코드 컴파일
      run: |
        cd routepick-backend
        ./gradlew compileJava compileTestJava

  # 단위 테스트 및 통합 테스트
  test:
    runs-on: ubuntu-latest
    needs: code-quality
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test
          MYSQL_DATABASE: routepick_test
          MYSQL_USER: test
          MYSQL_PASSWORD: test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4

    - name: Java 설정
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Gradle 캐시 설정
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: 공통 라이브러리 빌드
      run: |
        cd routepick-common
        ./gradlew clean build publishToMavenLocal

    - name: 테스트 환경 준비
      run: |
        # 테스트 데이터베이스 스키마 생성
        mysql -h 127.0.0.1 -u test -ptest routepick_test < database/routepick.sql

    - name: 단위 테스트 실행
      run: |
        cd routepick-backend
        ./gradlew test
      env:
        SPRING_PROFILES_ACTIVE: test
        DB_HOST: localhost
        DB_PORT: 3306
        DB_NAME: routepick_test
        DB_USERNAME: test
        DB_PASSWORD: test
        REDIS_HOST: localhost
        REDIS_PORT: 6379

    - name: 통합 테스트 실행
      run: |
        cd routepick-backend
        ./gradlew integrationTest
      env:
        SPRING_PROFILES_ACTIVE: test
        DB_HOST: localhost
        DB_PORT: 3306
        DB_NAME: routepick_test
        DB_USERNAME: test
        DB_PASSWORD: test
        REDIS_HOST: localhost
        REDIS_PORT: 6379

    - name: 테스트 커버리지 리포트
      run: |
        cd routepick-backend
        ./gradlew jacocoTestReport

    - name: 커버리지 업로드 (Codecov)
      uses: codecov/codecov-action@v3
      with:
        file: routepick-backend/build/reports/jacoco/test/jacocoTestReport.xml
        flags: backend
        name: backend-coverage

    - name: 테스트 결과 업로드
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          routepick-backend/build/reports/tests/
          routepick-backend/build/reports/jacoco/

  # 보안 스캔
  security-scan:
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4

    - name: OWASP 의존성 취약점 검사
      run: |
        cd routepick-backend
        ./gradlew dependencyCheckAnalyze
        
    - name: Trivy 보안 스캔
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: 'routepick-backend'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 보안 스캔 결과 업로드
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Docker 이미지 빌드
  build-image:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.event_name == 'push'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4

    - name: Java 설정
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: 공통 라이브러리 빌드
      run: |
        cd routepick-common
        ./gradlew clean build publishToMavenLocal

    - name: 애플리케이션 빌드
      run: |
        cd routepick-backend
        ./gradlew clean bootJar

    - name: AWS 자격 증명 설정
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: ECR 로그인
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Docker 메타데이터 설정
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Docker 이미지 빌드 및 푸시
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ./routepick-backend
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 이미지 보안 스캔 (Trivy)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ steps.meta.outputs.tags }}
        format: 'sarif'
        output: 'docker-trivy-results.sarif'

  # 개발 환경 배포
  deploy-dev:
    runs-on: ubuntu-latest
    needs: build-image
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: development
    
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4

    - name: AWS 자격 증명 설정
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: ECS 서비스 업데이트
      run: |
        aws ecs update-service \
          --cluster routepick-dev \
          --service routepick-backend-dev \
          --force-new-deployment \
          --region ${{ env.AWS_REGION }}

    - name: 배포 완료 대기
      run: |
        aws ecs wait services-stable \
          --cluster routepick-dev \
          --services routepick-backend-dev \
          --region ${{ env.AWS_REGION }}

    - name: 배포 후 Health Check
      run: |
        ALB_DNS=$(aws elbv2 describe-load-balancers \
          --names routepick-dev-alb \
          --query 'LoadBalancers[0].DNSName' \
          --output text \
          --region ${{ env.AWS_REGION }})
        
        for i in {1..10}; do
          if curl -f "http://$ALB_DNS/actuator/health" > /dev/null 2>&1; then
            echo "Health Check 성공"
            exit 0
          else
            echo "Health Check 실패 (시도 $i/10)"
            sleep 30
          fi
        done
        exit 1

  # 운영 환경 배포
  deploy-prod:
    runs-on: ubuntu-latest
    needs: build-image
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4

    - name: AWS 자격 증명 설정
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Blue/Green 배포 실행
      run: |
        # CodeDeploy를 통한 Blue/Green 배포
        aws deploy create-deployment \
          --application-name routepick-backend-prod \
          --deployment-config-name CodeDeployDefault.ECSBlueGreenCanary10Percent \
          --deployment-group-name routepick-backend-prod-dg \
          --region ${{ env.AWS_REGION }}

    - name: Slack 배포 알림
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#deployment'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        fields: repo,message,commit,author,action,eventName,ref,workflow

  # 성능 테스트
  performance-test:
    runs-on: ubuntu-latest
    needs: deploy-dev
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4

    - name: K6 성능 테스트 실행
      uses: grafana/k6-action@v0.3.1
      with:
        filename: scripts/performance/load-test.js
      env:
        API_BASE_URL: ${{ secrets.DEV_API_URL }}

    - name: 성능 테스트 결과 업로드
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-results
        path: results.json